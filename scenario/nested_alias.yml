version_dependent: true
input:
    input.go: |
        package alias

        // goverter:converter
        // goverter:extend AnyAny
        type Converter interface {
            A(source map[string]InputAlias) map[string]OutputAlias
            B(source map[string]any) map[string]any
            C(source struct{A InputAlias}) struct{A OutputAlias}
            D(source []GenAlias[string]) []GenAlias[string]
        }

        func AnyAny(a any) any {
            return a
        }

        type GenAlias[T any] []T
        type InputAlias = string
        type OutputAlias = string
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) A(source map[string]string) map[string]string {
        	var mapStringString map[string]string
        	if source != nil {
        		mapStringString = make(map[string]string, len(source))
        		for key, value := range source {
        			mapStringString[key] = value
        		}
        	}
        	return mapStringString
        }
        func (c *ConverterImpl) B(source map[string]interface{}) map[string]interface{} {
        	var mapStringUnknown map[string]interface{}
        	if source != nil {
        		mapStringUnknown = make(map[string]interface{}, len(source))
        		for key, value := range source {
        			mapStringUnknown[key] = execution.AnyAny(value)
        		}
        	}
        	return mapStringUnknown
        }
        func (c *ConverterImpl) C(source struct {
        	A string
        }) struct {
        	A string
        } {
        	var unnamed struct {
        		A string
        	}
        	unnamed.A = source.A
        	return unnamed
        }
        func (c *ConverterImpl) D(source []execution.GenAlias[string]) []execution.GenAlias[string] {
        	var aliasGenAliasList []execution.GenAlias[string]
        	if source != nil {
        		aliasGenAliasList = make([]execution.GenAlias[string], len(source))
        		for i := 0; i < len(source); i++ {
        			aliasGenAliasList[i] = c.aliasGenAliasToAliasGenAlias(source[i])
        		}
        	}
        	return aliasGenAliasList
        }
        func (c *ConverterImpl) aliasGenAliasToAliasGenAlias(source execution.GenAlias[string]) execution.GenAlias[string] {
        	var aliasGenAlias execution.GenAlias[string]
        	if source != nil {
        		aliasGenAlias = make(execution.GenAlias[string], len(source))
        		for i := 0; i < len(source); i++ {
        			aliasGenAlias[i] = source[i]
        		}
        	}
        	return aliasGenAlias
        }
