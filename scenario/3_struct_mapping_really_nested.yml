input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            // goverter:map Nested.Inner.Inner2.Name Name
            Convert(source Input) Output
        }

        type Input struct {
            Nested *InputNested
        }
        type InputNested struct {
            Inner InputNestedNested
        }
        type InputNestedNested struct {
            Inner2 *InputNestedNestedNested
        }
        type InputNestedNestedNested struct {
            Name *string
        }
        type Output struct {
            Name *string
        }
success: |
    // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/jmattheis/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source execution.Input) execution.Output {
    	var structsOutput execution.Output
    	var pString *string
    	if source.Nested != nil && source.Nested.Inner.Inner2 != nil {
    		pString = source.Nested.Inner.Inner2.Name
    	}
    	var pString2 *string
    	if pString != nil {
    		xstring := *pString
    		pString2 = &xstring
    	}
    	structsOutput.Name = pString2
    	return structsOutput
    }
