input:
    input.go: |
        package structs
        // goverter:converter
        // goverter:mapExtend PluckAgeInt
        // goverter:mapExtend PlusScoreInt
        type Converter interface {
            // goverter:mapExtend Age PluckAgeInt
            // goverter:mapExtend Score PlusScoreInt
            Convert(source *Input) *Output
        }
        type Input struct {
            Name string
            Age int
            Score int
        }
        type Output struct {
            Name string
            Age int
            Score int
        }
        func PluckAgeInt(source Input) int {
            return source.Age
        }
        func PlusScoreInt(source int) int {
            return source + 1
        }
success: |
    // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/jmattheis/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source *execution.Input) *execution.Output {
    	var pStructsOutput *execution.Output
    	if source != nil {
    		structsOutput := c.structsInputToStructsOutput(*source)
    		pStructsOutput = &structsOutput
    	}
    	return pStructsOutput
    }
    func (c *ConverterImpl) structsInputToStructsOutput(source execution.Input) execution.Output {
    	var structsOutput execution.Output
    	structsOutput.Name = source.Name
    	structsOutput.Age = execution.PluckAgeInt(source)
    	structsOutput.Score = execution.PlusScoreInt(source.Score)
    	return structsOutput
    }
