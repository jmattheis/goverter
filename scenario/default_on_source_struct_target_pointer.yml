input:
    input.go: |
        package execution

        // goverter:converter
        type Converter interface {
            // goverter:default NewOutputWithDefaults
            // goverter:useZeroValueOnPointerInconsistency
            Convert(source *Input) (Output, error)
        }

        // goverter:converter
        type Update interface {
            // goverter:default NewOutputWithDefaults
            // goverter:default:update
            // goverter:useZeroValueOnPointerInconsistency
            Update(source *Input) (Output, error)
        }

        // goverter:converter
        type UpdateUpdate interface {
            // goverter:default NewOutputWithDefaults
            // goverter:default:update
            // goverter:update:ignoreZeroValueField
            // goverter:useZeroValueOnPointerInconsistency
            Update(source *Input) (Output, error)
        }
        type Input struct { Name string }
        type Output struct { Name string }

        func NewOutputWithDefaults() Output {
            return Output{ Name: "string" }
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source *execution.Input) (execution.Output, error) {
        	executionOutput := execution.NewOutputWithDefaults()
        	if source != nil {
        		executionOutput.Name = (*source).Name
        	}
        	return executionOutput, nil
        }

        type UpdateImpl struct{}

        func (c *UpdateImpl) Update(source *execution.Input) (execution.Output, error) {
        	executionOutput := execution.NewOutputWithDefaults()
        	if source != nil {
        		executionOutput.Name = (*source).Name
        	}
        	return executionOutput, nil
        }

        type UpdateUpdateImpl struct{}

        func (c *UpdateUpdateImpl) Update(source *execution.Input) (execution.Output, error) {
        	executionOutput := execution.NewOutputWithDefaults()
        	if source != nil {
        		if (*source).Name != "" {
        			executionOutput.Name = (*source).Name
        		}
        	}
        	return executionOutput, nil
        }
