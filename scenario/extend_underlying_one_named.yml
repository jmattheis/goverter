input:
    input.go: |
        package underlying

        // goverter:converter
        // goverter:extend IntToString
        // goverter:useUnderlyingTypeMethods
        type C1 interface { C(source X[IntID]) X[StringID] }

        // goverter:converter
        // goverter:extend IntToString
        // goverter:useUnderlyingTypeMethods
        type C2 interface { C(source X[IntID]) X[string] }

        // goverter:converter
        // goverter:extend IntToString
        // goverter:useUnderlyingTypeMethods
        type C3 interface { C(source X[int]) X[string] }

        // goverter:converter
        // goverter:extend IntToString
        // goverter:useUnderlyingTypeMethods
        type C4 interface { C(source X[int]) X[StringID] }

        func IntToString(s int) string { return "" }

        type IntID int
        type StringID string

        type X[T any] struct { T T }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type C1Impl struct{}

        func (c *C1Impl) C(source execution.X[execution.IntID]) execution.X[execution.StringID] {
        	var underlyingX execution.X[execution.StringID]
        	underlyingX.T = execution.StringID(execution.IntToString(int(source.T)))
        	return underlyingX
        }

        type C2Impl struct{}

        func (c *C2Impl) C(source execution.X[execution.IntID]) execution.X[string] {
        	var underlyingX execution.X[string]
        	underlyingX.T = execution.IntToString(int(source.T))
        	return underlyingX
        }

        type C3Impl struct{}

        func (c *C3Impl) C(source execution.X[int]) execution.X[string] {
        	var underlyingX execution.X[string]
        	underlyingX.T = execution.IntToString(source.T)
        	return underlyingX
        }

        type C4Impl struct{}

        func (c *C4Impl) C(source execution.X[int]) execution.X[execution.StringID] {
        	var underlyingX execution.X[execution.StringID]
        	underlyingX.T = execution.StringID(execution.IntToString(source.T))
        	return underlyingX
        }
