input:
    input.go: |
        package directive

        //goverter:converter
        type Simple interface {
            //goverter:context c
            //goverter:map Value | FromContext
            Convert(source struct{ Value int }, c string) struct{ Value string }
        }

        type (
            //goverter:converter
            One interface{}
            Two interface{}
        )

        //goverter:variables
        var (
            Convert func(string) string
        )

        //goverter:context c
        func FromContext(c string) string { return c }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type OneImpl struct{}
        type SimpleImpl struct{}

        func (c *SimpleImpl) Convert(source struct {
        	Value int
        }, context string) struct {
        	Value string
        } {
        	var unnamed struct {
        		Value string
        	}
        	unnamed.Value = execution.FromContext(context)
        	_ = source
        	return unnamed
        }
    - input.gen.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package directive

        func init() {
        	Convert = func(source string) string {
        		return source
        	}
        }
