input:
    input.go: |
        package execution

        // goverter:converter
        // goverter:useZeroValueOnPointerInconsistency
        type Converter interface {
            // goverter:default NewOutput
            Convert(source *Input) Output
        }

        // goverter:converter
        // goverter:useZeroValueOnPointerInconsistency
        type Update interface {
            // goverter:default NewOutput
            // goverter:default:update
            ConvertUpdate(source *Input) Output
        }

        type Input struct { ID int }
        type Output struct { ID int }
        func NewOutput() Output {
            return Output{ ID: 0 }
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert(source *execution.Input) execution.Output {
        	executionOutput := execution.NewOutput()
        	if source != nil {
        		executionOutput.ID = (*source).ID
        	}
        	return executionOutput
        }

        type UpdateImpl struct{}

        func (c *UpdateImpl) ConvertUpdate(source *execution.Input) execution.Output {
        	executionOutput := execution.NewOutput()
        	if source != nil {
        		executionOutput.ID = (*source).ID
        	}
        	return executionOutput
        }
